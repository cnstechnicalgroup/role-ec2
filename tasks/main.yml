---
- name: Normalize variables
  set_fact:
    role: "{{ item.value.role }}"
    mode: "{{ item.value.mode }}"
    prefix: "{{ item.value.prefix }}"
    name: "{{ item.value.name }}"
    domain: "{{ item.value.domain }}"
    subdomain: "{{ item.value.subdomain }}"
    keypair: "{{ item.value.keypair }}"
    ami_image: "{{ item.value.ami_image }}"
    instance_type: "{{ item.value.instance_type }}"
    region: "{{ item.value.region }}"
    assign_public_ip: "{{ item.value.assign_public_ip }}"
    security_group: "{{ item.value.prefix }}-{{ item.value.mode }}-{{ item.value.role }}"
    count: "{{ item.value.count }}"
    source_dest_check: "{{ item.value.source_dest_check }}"
    use_elb: "{{ item.value.use_elb }}"
    ssl_arn: "{{ item.value.ssl_arn}}"
    elastic_ip: "{{ item.value.elastic_ip }}"
  with_dict: instance

- name: Get web subnet id
  set_fact:
    subnet_id: "{{ item.id }}"
  with_items: vpc.subnets
  when: item.resource_tags['Name'] is defined and item.resource_tags['Name'] == "{{ prefix }}_{{ role }}_{{ mode }}"

- name: Initialize EC2 instance
  local_action: 
    module: ec2
    keypair: "{{ keypair }}"
    image: "{{ ami_image }}"
    instance_type: "{{ instance_type }}"
    region: "{{ region }}"
    assign_public_ip: "{{ assign_public_ip }}"
    vpc_subnet_id: "{{ subnet_id }}"
    group: "{{ security_group }}"
    source_dest_check:  "{{ source_dest_check }}"
    exact_count: "{{ count }}"
    count_tag:
      Name: "{{ prefix }}-{{ role }}-{{ mode }}"
    instance_tags:
      Owner: "{{ owner }}"
      Name: "{{ prefix }}-{{ role }}-{{ mode }}"
      Stack: "{{ prefix }}_{{ mode }}"
      Role: "host_{{ prefix }}_{{ role }}"
      Mode: "{{ mode }}"
    wait: yes
  register: ec2

- name: Wait for SSH to come up
  local_action: wait_for host={{ item.private_dns_name }} port=22 delay=60 timeout=320 state=started
  with_items: ec2.instances

- name: Attach ElasticIP if defined
  ec2_eip: "instance_id={{ item.id }} region={{ region }}"
  with_items: ec2.instances
  when: elastic_ip
